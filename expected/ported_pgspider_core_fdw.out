-- PGSpider Extension does not have pg_spd_node_info table
-- --Testcase 1:
-- DELETE FROM pg_spd_node_info;
--SELECT pg_sleep(15);
--Testcase 183:
CREATE EXTENSION pgspider_ext;
--Testcase 184:
CREATE SERVER pgspider_svr FOREIGN DATA WRAPPER pgspider_ext;
--Testcase 185:
CREATE USER MAPPING FOR public SERVER pgspider_svr;
--Testcase 186:
CREATE TABLE test1 (i int,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 187:
CREATE EXTENSION postgres_fdw;
--Testcase 188:
CREATE EXTENSION file_fdw;
--Testcase 189:
CREATE EXTENSION sqlite_fdw;
--Testcase 190:
CREATE EXTENSION tinybrace_fdw;
--Testcase 191:
CREATE EXTENSION mysql_fdw;
-- Enable to pushdown aggregate
SET enable_partitionwise_aggregate TO on;
-- Turn off leader node participation to avoid duplicate data error when executing
-- parallel query
SET parallel_leader_participation TO off;
--Testcase 192:
CREATE SERVER file_svr FOREIGN DATA WRAPPER file_fdw;
--Testcase 193:
CREATE FOREIGN TABLE filetbl__file_svr__0 (i int) SERVER file_svr options(filename '/tmp/pgtest.csv');
--Testcase 194:
CREATE TABLE filetbl (i int,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 295:
CREATE FOREIGN TABLE filetbl_child1 PARTITION OF filetbl FOR VALUES IN ('/file_svr/') SERVER pgspider_svr OPTIONS(child_name 'filetbl__file_svr__0');
--Testcase 2:
SELECT * FROM filetbl;
 i | __spd_url  
---+------------
 1 | /file_svr/
 2 | /file_svr/
 3 | /file_svr/
 4 | /file_svr/
(4 rows)

-- PGSpider Extension does not support getting version
-- --get version
-- --Testcase 295:
-- \df pgspider_core*
-- --Testcase 296:
-- SELECT * FROM public.pgspider_core_fdw_version();
-- --Testcase 297:
-- SELECT pgspider_core_fdw_version();
--Testcase 195:
CREATE SERVER filesvr2 FOREIGN DATA WRAPPER file_fdw;
--Testcase 196:
CREATE FOREIGN TABLE test1__file_svr__0 (i int) SERVER file_svr options(filename '/tmp/pgtest.csv');
--Testcase 296:
CREATE FOREIGN TABLE test1_file_child1 PARTITION OF test1 FOR VALUES IN ('/file_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1__file_svr__0');
--Testcase 3:
SELECT * FROM test1;
 i | __spd_url  
---+------------
 1 | /file_svr/
 2 | /file_svr/
 3 | /file_svr/
 4 | /file_svr/
(4 rows)

--Testcase 197:
CREATE FOREIGN TABLE test1__filesvr2__0 (i int) SERVER file_svr options(filename '/tmp/pgtest.csv');
--Testcase 297:
CREATE FOREIGN TABLE test1_file_child2 PARTITION OF test1 FOR VALUES IN ('/file_svr2/') SERVER pgspider_svr OPTIONS(child_name 'test1__filesvr2__0');
--Testcase 4:
SELECT * FROM test1 order by i,__spd_url;
 i |  __spd_url  
---+-------------
 1 | /file_svr/
 1 | /file_svr2/
 2 | /file_svr/
 2 | /file_svr2/
 3 | /file_svr/
 3 | /file_svr2/
 4 | /file_svr/
 4 | /file_svr2/
(8 rows)

-- PGSpider Extension does not support IN syntax
-- --Testcase 5:
-- SELECT * FROM test1 IN ('/file_svr/') ORDER BY i,__spd_url;
-- --Testcase 6:
-- SELECT * FROM test1 IN ('/file_svr/') where i = 1;
--Testcase 198:
CREATE SERVER tiny_svr FOREIGN DATA WRAPPER tinybrace_fdw OPTIONS (host '127.0.0.1',port '5100', dbname 'test.db');
--Testcase 199:
CREATE USER mapping for public server tiny_svr OPTIONS(username 'user',password 'testuser');
--Testcase 200:
CREATE FOREIGN TABLE test1__tiny_svr__0 (i int) SERVER tiny_svr OPTIONS(table_name 'test1');
--Testcase 298:
CREATE FOREIGN TABLE test1_tiny_child1 PARTITION OF test1 FOR VALUES IN ('/tiny_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1__tiny_svr__0');
--Testcase 7:
SELECT * FROM test1__tiny_svr__0 ORDER BY i;
 i 
---
 1
(1 row)

--Testcase 8:
SELECT * FROM test1 ORDER BY i,__spd_url;
 i |  __spd_url  
---+-------------
 1 | /file_svr/
 1 | /file_svr2/
 1 | /tiny_svr/
 2 | /file_svr/
 2 | /file_svr2/
 3 | /file_svr/
 3 | /file_svr2/
 4 | /file_svr/
 4 | /file_svr2/
(9 rows)

-- --Testcase 9:
-- SELECT * FROM test1 IN ('/tiny_svr/');
-- --Testcase 10:
-- SELECT * FROM test1 IN ('/tiny_svr/') where i = 1;
--Testcase 201:
CREATE SERVER post_svr FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1',port '15432');
--Testcase 202:
CREATE USER mapping for public server post_svr OPTIONS(user 'postgres',password 'postgres');
--Testcase 203:
CREATE FOREIGN TABLE test1__post_svr__0 (i int) SERVER post_svr OPTIONS(table_name 'test1');
--Testcase 299:
CREATE FOREIGN TABLE test1_post_child1 PARTITION OF test1 FOR VALUES IN ('/post_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1__post_svr__0');
--Testcase 11:
SELECT * FROM test1__post_svr__0 ORDER BY i;
  i   
------
 1111
(1 row)

--Testcase 12:
SELECT * FROM test1 ORDER BY i,__spd_url;
  i   |  __spd_url  
------+-------------
    1 | /file_svr/
    1 | /file_svr2/
    1 | /tiny_svr/
    2 | /file_svr/
    2 | /file_svr2/
    3 | /file_svr/
    3 | /file_svr2/
    4 | /file_svr/
    4 | /file_svr2/
 1111 | /post_svr/
(10 rows)

-- --Testcase 13:
-- SELECT * FROM test1 IN ('/post_svr/') ORDER BY i,__spd_url;
-- --Testcase 14:
-- SELECT * FROM test1 IN ('/post_svr/') where i = 1 ORDER BY i,__spd_url;
--Testcase 204:
CREATE SERVER sqlite_svr FOREIGN DATA WRAPPER sqlite_fdw OPTIONS (database '/tmp/pgtest.db');
--Testcase 205:
CREATE FOREIGN TABLE test1__sqlite_svr__0 (i int) SERVER sqlite_svr OPTIONS(table 'test1');
--Testcase 300:
CREATE FOREIGN TABLE test1_sqlite_child1 PARTITION OF test1 FOR VALUES IN ('/sqlite_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1__sqlite_svr__0');
--Testcase 15:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(12 rows)

-- --Testcase 16:
-- SELECT * FROM test1 IN ('/sqlite_svr/') ORDER BY i,__spd_url;
-- --Testcase 17:
-- SELECT * FROM test1 IN ('/sqlite_svr/') where i = 4 ORDER BY i,__spd_url;
--Testcase 206:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw OPTIONS (host '127.0.0.1',port '3306');
--Testcase 207:
CREATE USER mapping for public server mysql_svr OPTIONS(username 'root',password 'Mysql_1234');
--Testcase 208:
CREATE FOREIGN TABLE test1__mysql_svr__0 (i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test1');
--Testcase 301:
CREATE FOREIGN TABLE test1_mysql_child1 PARTITION OF test1 FOR VALUES IN ('/mysql_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1__mysql_svr__0');
--Testcase 18:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 19:
-- SELECT * FROM test1 IN ('/mysql_svr/') ORDER BY i,__spd_url;
--Testcase 20:
SELECT * FROM test1 where i = 1 ORDER BY i,__spd_url;
 i |  __spd_url   
---+--------------
 1 | /file_svr/
 1 | /file_svr2/
 1 | /mysql_svr/
 1 | /sqlite_svr/
 1 | /tiny_svr/
(5 rows)

-- --Testcase 21:
-- SELECT * FROM test1 IN ('/mysql_svr/') where i = 5 ORDER BY i,__spd_url;
--Testcase 22:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 23:
-- SELECT * FROM test1 IN ('/test2/') ORDER BY i,__spd_url;
--Testcase 24:
SELECT * FROM test1 order by i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 25:
-- SELECT * FROM test1 IN ('/file_svr/') ORDER BY i,__spd_url;
-- --Testcase 26:
-- SELECT * FROM test1 IN ('/file_svr/') where i = 1 ORDER BY i,__spd_url;
--Testcase 27:
SELECT * FROM test1__tiny_svr__0 order by i;
 i 
---
 1
(1 row)

--Testcase 28:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 29:
-- SELECT * FROM test1 IN ('/tiny_svr/');
-- --Testcase 30:
-- SELECT * FROM test1 IN ('/tiny_svr/') where i = 1;
--Testcase 31:
SELECT * FROM test1__post_svr__0 order by i;
  i   
------
 1111
(1 row)

--Testcase 32:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 33:
-- SELECT * FROM test1 IN ('/post_svr/') ORDER BY i,__spd_url;
-- --Testcase 34:
-- SELECT * FROM test1 IN ('/post_svr/') where i = 1 ORDER BY i,__spd_url;
--Testcase 35:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 36:
-- SELECT * FROM test1 IN ('/sqlite_svr/') ORDER BY i,__spd_url;
-- --Testcase 37:
-- SELECT * FROM test1 IN ('/sqlite_svr/') where i = 4 ORDER BY i,__spd_url;
--Testcase 38:
SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(17 rows)

-- --Testcase 39:
-- SELECT * FROM test1 IN ('/mysql_svr/') ORDER BY i,__spd_url;
--Testcase 40:
SELECT * FROM test1 where i = 1 ORDER BY i,__spd_url;
 i |  __spd_url   
---+--------------
 1 | /file_svr/
 1 | /file_svr2/
 1 | /mysql_svr/
 1 | /sqlite_svr/
 1 | /tiny_svr/
(5 rows)

-- --Testcase 41:
-- SELECT * FROM test1 IN ('/mysql_svr/') where i = 5 ORDER BY i,__spd_url;
-- --Testcase 42:
-- SELECT * FROM test1 IN ('/mysql_svr/', '/sqlite_svr/') ORDER BY  i,__spd_url;
--Testcase 43:
SELECT * FROM test1 UNION ALL SELECT * FROM test1 ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr/
     1 | /file_svr2/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr/
     2 | /file_svr2/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr/
     3 | /file_svr2/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr/
     4 | /file_svr2/
     4 | /file_svr2/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
   777 | /mysql_svr/
  1111 | /post_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
 22222 | /sqlite_svr/
(34 rows)

-- --Testcase 44:
-- SELECT * FROM test1 IN ('/mysql_svr/') UNION ALL SELECT * FROM test1 IN ('/mysql_svr/') ORDER BY i,__spd_url;
-- --Testcase 45:
-- SELECT * FROM test1 IN ('/mysql_svr/') UNION ALL SELECT * FROM test1 IN ('/sqlite_svr/') ORDER BY i,__spd_url;
-- --Testcase 46:
-- SELECT * FROM test1 IN ('/mysql_svr/', '/sqlite_svr/') UNION ALL SELECT * FROM test1 IN ('/mysql_svr/', '/sqlite_svr/') ORDER BY i,__spd_url;
--Testcase 209:
CREATE TABLE test1_1 (i int,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 210:
CREATE FOREIGN TABLE test1_1__tiny_svr__0 (i int) SERVER tiny_svr OPTIONS(table_name 'test1');
--Testcase 302:
CREATE FOREIGN TABLE test1_1_tiny_child1 PARTITION OF test1_1 FOR VALUES IN ('/tiny_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1_1__tiny_svr__0');
--Testcase 211:
CREATE FOREIGN TABLE test1_1__post_svr__0 (i int) SERVER post_svr OPTIONS(table_name 'test1');
--Testcase 303:
CREATE FOREIGN TABLE test1_1_post_child1 PARTITION OF test1_1 FOR VALUES IN ('/post_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1_1__post_svr__0');
--Testcase 212:
CREATE FOREIGN TABLE test1_1__sqlite_svr__0 (i int) SERVER sqlite_svr OPTIONS(table 'test1');
--Testcase 304:
CREATE FOREIGN TABLE test1_1_sqlite_child1 PARTITION OF test1_1 FOR VALUES IN ('/sqlite_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1_1__sqlite_svr__0');
--Testcase 213:
CREATE FOREIGN TABLE test1_1__mysql_svr__0 (i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test1');
--Testcase 305:
CREATE FOREIGN TABLE test1_1_mysql_child1 PARTITION OF test1_1 FOR VALUES IN ('/mysql_svr/') SERVER pgspider_svr OPTIONS(child_name 'test1_1__mysql_svr__0');
-- --Testcase 47:
-- SELECT * FROM test1 IN ('/mysql_svr/'), test1_1 IN ('/sqlite_svr/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
-- --Testcase 48:
-- SELECT * FROM test1 IN ('/sqlite_svr/','/mysql_svr/'), test1_1 IN ('/mysql_svr/','/sqlite_svr/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
-- -- nothing case
-- --Testcase 49:
-- SELECT * FROM test1 IN ('/sqlite_svr/','/mysql_svrrrrrr/');
-- --Testcase 50:
-- SELECT * FROM test1 IN ('/mysql_svr/'), test1_1 IN ('/mysql_svr2/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
-- --Testcase 51:
-- SELECT * FROM test1 IN ('/mysql_svr2/'), test1_1 IN ('/mysql_svr/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
-- --Testcase 52:
-- SELECT * FROM test1 IN ('/mysql_svr2/'), test1_1 IN ('/mysql_svr2/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
-- --Testcase 53:
-- SELECT * FROM test1 IN ('/sqlite_svr/','/mysql_svr2/'), test1_1 IN ('/sqlite_svr2/','/mysql_svr/') ORDER BY test1.i,test1.__spd_url,test1_1.i,test1_1.__spd_url;
--Testcase 54:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM test1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather
   Output: test1.i, test1.__spd_url
   Workers Planned: 2
   ->  Parallel Append
         ->  Foreign Scan on public.test1_tiny_child1 test1_6
               Output: test1_6.i, test1_6.__spd_url
                 TinyBrace query: SELECT `i` FROM "test1"
                 TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
         ->  Foreign Scan on public.test1_sqlite_child1 test1_5
               Output: test1_5.i, test1_5.__spd_url
                 SQLite query: SELECT `i` FROM main."test1"
         ->  Foreign Scan on public.test1_mysql_child1 test1_3
               Output: test1_3.i, test1_3.__spd_url
                 Remote query: SELECT `i` FROM `test`.`test1`
         ->  Foreign Scan on public.test1_post_child1 test1_4
               Output: test1_4.i, test1_4.__spd_url
                 Remote SQL: SELECT i FROM public.test1
         ->  Foreign Scan on public.test1_file_child1 test1_1
               Output: test1_1.i, test1_1.__spd_url
                 Foreign File: /tmp/pgtest.csv
         ->  Foreign Scan on public.test1_file_child2 test1_2
               Output: test1_2.i, test1_2.__spd_url
                 Foreign File: /tmp/pgtest.csv
(23 rows)

-- PGSpider Extension does not push down avg, so all targets are not pushed down
--Testcase 55:
EXPLAIN (VERBOSE, COSTS OFF) SELECT sum(i), avg(i) FROM test1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Finalize Aggregate
   Output: sum(test1_5.i), avg(test1_5.i)
   ->  Gather
         Output: (PARTIAL sum(test1_5.i)), (PARTIAL avg(test1_5.i))
         Workers Planned: 2
         ->  Parallel Append
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1_5.i), PARTIAL avg(test1_5.i)
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5
                           Output: test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1_4.i), PARTIAL avg(test1_4.i)
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4
                           Output: test1_4.i
                             SQLite query: SELECT `i` FROM main."test1"
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1_2.i), PARTIAL avg(test1_2.i)
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2
                           Output: test1_2.i
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1_3.i), PARTIAL avg(test1_3.i)
                     ->  Foreign Scan on public.test1_post_child1 test1_3
                           Output: test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1.i), PARTIAL avg(test1.i)
                     ->  Foreign Scan on public.test1_file_child1 test1
                           Output: test1.i
                             Foreign File: /tmp/pgtest.csv
               ->  Partial Aggregate
                     Output: PARTIAL sum(test1_1.i), PARTIAL avg(test1_1.i)
                     ->  Foreign Scan on public.test1_file_child2 test1_1
                           Output: test1_1.i
                             Foreign File: /tmp/pgtest.csv
(37 rows)

-- -- only post_svr is alive
-- --Testcase 56:
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM test1 IN ('/post_svr/');
-- only __spd_url target list is OK
--Testcase 57:
SELECT __spd_url FROM test1 ORDER BY __spd_url;
  __spd_url   
--------------
 /file_svr/
 /file_svr/
 /file_svr/
 /file_svr/
 /file_svr2/
 /file_svr2/
 /file_svr2/
 /file_svr2/
 /mysql_svr/
 /mysql_svr/
 /mysql_svr/
 /mysql_svr/
 /mysql_svr/
 /post_svr/
 /sqlite_svr/
 /sqlite_svr/
 /tiny_svr/
(17 rows)

--Testcase 214:
EXPLAIN VERBOSE
SELECT i, __spd_url FROM test1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=341.07..342.08 rows=404 width=36)
   Output: test1.i, test1.__spd_url
   Sort Key: test1.i, test1.__spd_url
   ->  Append  (cost=1.11..323.58 rows=404 width=36)
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1.i, test1.__spd_url
               Group Key: test1.i, test1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1.i, test1.__spd_url
                     Sort Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.i, test1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1_1.i, test1_1.__spd_url
               Group Key: test1_1.i, test1_1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1_1.i, test1_1.__spd_url
                     Sort Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.i, test1_1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_2.i, test1_2.__spd_url
                 Local server startup cost: 10
                 Remote query: SELECT `i` FROM `test`.`test1` GROUP BY 1
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_3.i, test1_3.__spd_url
                 Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                 Remote SQL: SELECT i FROM public.test1 GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_4.i, test1_4.__spd_url
                 SQLite query: SELECT `i` FROM main."test1" GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_5.i, test1_5.__spd_url
                 TinyBrace query: SELECT `i` FROM "test1" GROUP BY 1
                 TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(39 rows)

--Testcase 215:
SELECT i, __spd_url FROM test1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(14 rows)

--Testcase 216:
EXPLAIN VERBOSE
SELECT i, __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=341.07..342.08 rows=404 width=36)
   Output: test1.i, test1.__spd_url
   Sort Key: test1.i, test1.__spd_url
   ->  Append  (cost=1.11..323.58 rows=404 width=36)
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1.i, test1.__spd_url
               Group Key: test1.i, test1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1.i, test1.__spd_url
                     Sort Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.i, test1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1_1.i, test1_1.__spd_url
               Group Key: test1_1.i, test1_1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1_1.i, test1_1.__spd_url
                     Sort Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.i, test1_1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_2.i, test1_2.__spd_url
                 Local server startup cost: 10
                 Remote query: SELECT `i` FROM `test`.`test1` GROUP BY 1
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_3.i, test1_3.__spd_url
                 Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                 Remote SQL: SELECT i FROM public.test1 GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_4.i, test1_4.__spd_url
                 SQLite query: SELECT `i` FROM main."test1" GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_5.i, test1_5.__spd_url
                 TinyBrace query: SELECT `i` FROM "test1" GROUP BY 1
                 TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(39 rows)

--Testcase 58:
SELECT i, __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
   i   |  __spd_url   
-------+--------------
     1 | /file_svr/
     1 | /file_svr2/
     1 | /mysql_svr/
     1 | /sqlite_svr/
     1 | /tiny_svr/
     2 | /file_svr/
     2 | /file_svr2/
     3 | /file_svr/
     3 | /file_svr2/
     4 | /file_svr/
     4 | /file_svr2/
   777 | /mysql_svr/
  1111 | /post_svr/
 22222 | /sqlite_svr/
(14 rows)

--Testcase 217:
EXPLAIN VERBOSE
SELECT __spd_url, i FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=341.07..342.08 rows=404 width=36)
   Output: test1.__spd_url, test1.i
   Sort Key: test1.i, test1.__spd_url
   ->  Append  (cost=1.11..323.58 rows=404 width=36)
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1.__spd_url, test1.i
               Group Key: test1.i, test1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1.__spd_url, test1.i
                     Sort Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.__spd_url, test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Group  (cost=1.11..1.12 rows=1 width=36)
               Output: test1_1.__spd_url, test1_1.i
               Group Key: test1_1.i, test1_1.__spd_url
               ->  Sort  (cost=1.11..1.11 rows=1 width=36)
                     Output: test1_1.__spd_url, test1_1.i
                     Sort Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.__spd_url, test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_2.__spd_url, test1_2.i
                 Local server startup cost: 10
                 Remote query: SELECT `i` FROM `test`.`test1` GROUP BY 1
         ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
               Output: test1_3.__spd_url, test1_3.i
                 Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                 Remote SQL: SELECT i FROM public.test1 GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_4.__spd_url, test1_4.i
                 SQLite query: SELECT `i` FROM main."test1" GROUP BY 1
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=36)
               Output: test1_5.__spd_url, test1_5.i
                 TinyBrace query: SELECT `i` FROM "test1" GROUP BY 1
                 TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(39 rows)

--Testcase 59:
SELECT __spd_url, i FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
  __spd_url   |   i   
--------------+-------
 /file_svr/   |     1
 /file_svr2/  |     1
 /mysql_svr/  |     1
 /sqlite_svr/ |     1
 /tiny_svr/   |     1
 /file_svr/   |     2
 /file_svr2/  |     2
 /file_svr/   |     3
 /file_svr2/  |     3
 /file_svr/   |     4
 /file_svr2/  |     4
 /mysql_svr/  |   777
 /post_svr/   |  1111
 /sqlite_svr/ | 22222
(14 rows)

--Testcase 218:
EXPLAIN VERBOSE
SELECT avg(i), __spd_url FROM test1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Gather Merge  (cost=4730.53..4889.20 rows=1360 width=68)
   Output: (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
   Workers Planned: 2
   ->  Sort  (cost=3730.50..3732.20 rows=680 width=68)
         Output: (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
         Sort Key: test1_5.i, test1_5.__spd_url
         ->  Parallel Append  (cost=3438.60..3698.51 rows=680 width=68)
               ->  HashAggregate  (cost=3448.60..3452.86 rows=341 width=68)
                     Output: avg(test1_5.i), test1_5.__spd_url, test1_5.i
                     Group Key: test1_5.i, test1_5.__spd_url
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=36)
                           Output: test1_5.__spd_url, test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  HashAggregate  (cost=3438.60..3442.86 rows=341 width=68)
                     Output: avg(test1_4.i), test1_4.__spd_url, test1_4.i
                     Group Key: test1_4.i, test1_4.__spd_url
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=36)
                           Output: test1_4.__spd_url, test1_4.i
                             SQLite query: SELECT `i` FROM main."test1"
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: avg(test1_2.i), test1_2.__spd_url, test1_2.i
                     Group Key: test1_2.i, test1_2.__spd_url
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_2.__spd_url, test1_2.i
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: avg(test1_3.i), test1_3.__spd_url, test1_3.i
                     Group Key: test1_3.i, test1_3.__spd_url
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_3.__spd_url, test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: avg(test1.i), test1.__spd_url, test1.i
                     Group Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.__spd_url, test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: avg(test1_1.i), test1_1.__spd_url, test1_1.i
                     Group Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.__spd_url, test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(47 rows)

--Testcase 219:
SELECT avg(i), __spd_url FROM test1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
          avg           |  __spd_url   
------------------------+--------------
 1.00000000000000000000 | /file_svr/
 1.00000000000000000000 | /file_svr2/
 1.00000000000000000000 | /mysql_svr/
 1.00000000000000000000 | /sqlite_svr/
 1.00000000000000000000 | /tiny_svr/
     2.0000000000000000 | /file_svr/
     2.0000000000000000 | /file_svr2/
     3.0000000000000000 | /file_svr/
     3.0000000000000000 | /file_svr2/
     4.0000000000000000 | /file_svr/
     4.0000000000000000 | /file_svr2/
   777.0000000000000000 | /mysql_svr/
  1111.0000000000000000 | /post_svr/
     22222.000000000000 | /sqlite_svr/
(14 rows)

--Testcase 220:
EXPLAIN VERBOSE
SELECT avg(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Gather Merge  (cost=4730.53..4889.20 rows=1360 width=68)
   Output: (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
   Workers Planned: 2
   ->  Sort  (cost=3730.50..3732.20 rows=680 width=68)
         Output: (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
         Sort Key: test1_5.i, test1_5.__spd_url
         ->  Parallel Append  (cost=3438.60..3698.51 rows=680 width=68)
               ->  HashAggregate  (cost=3448.60..3452.86 rows=341 width=68)
                     Output: avg(test1_5.i), test1_5.__spd_url, test1_5.i
                     Group Key: test1_5.i, test1_5.__spd_url
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=36)
                           Output: test1_5.__spd_url, test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  HashAggregate  (cost=3438.60..3442.86 rows=341 width=68)
                     Output: avg(test1_4.i), test1_4.__spd_url, test1_4.i
                     Group Key: test1_4.i, test1_4.__spd_url
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=36)
                           Output: test1_4.__spd_url, test1_4.i
                             SQLite query: SELECT `i` FROM main."test1"
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: avg(test1_2.i), test1_2.__spd_url, test1_2.i
                     Group Key: test1_2.i, test1_2.__spd_url
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_2.__spd_url, test1_2.i
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: avg(test1_3.i), test1_3.__spd_url, test1_3.i
                     Group Key: test1_3.i, test1_3.__spd_url
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_3.__spd_url, test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: avg(test1.i), test1.__spd_url, test1.i
                     Group Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.__spd_url, test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: avg(test1_1.i), test1_1.__spd_url, test1_1.i
                     Group Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.__spd_url, test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(47 rows)

--Testcase 60:
SELECT avg(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
          avg           |  __spd_url   
------------------------+--------------
 1.00000000000000000000 | /file_svr/
 1.00000000000000000000 | /file_svr2/
 1.00000000000000000000 | /mysql_svr/
 1.00000000000000000000 | /sqlite_svr/
 1.00000000000000000000 | /tiny_svr/
     2.0000000000000000 | /file_svr/
     2.0000000000000000 | /file_svr2/
     3.0000000000000000 | /file_svr/
     3.0000000000000000 | /file_svr2/
     4.0000000000000000 | /file_svr/
     4.0000000000000000 | /file_svr2/
   777.0000000000000000 | /mysql_svr/
  1111.0000000000000000 | /post_svr/
     22222.000000000000 | /sqlite_svr/
(14 rows)

--Testcase 221:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i) FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Gather Merge  (cost=4730.53..4889.20 rows=1360 width=68)
   Output: test1_5.__spd_url, (avg(test1_5.i)), test1_5.i
   Workers Planned: 2
   ->  Sort  (cost=3730.50..3732.20 rows=680 width=68)
         Output: test1_5.__spd_url, (avg(test1_5.i)), test1_5.i
         Sort Key: test1_5.i, test1_5.__spd_url
         ->  Parallel Append  (cost=3438.60..3698.51 rows=680 width=68)
               ->  HashAggregate  (cost=3448.60..3452.86 rows=341 width=68)
                     Output: test1_5.__spd_url, avg(test1_5.i), test1_5.i
                     Group Key: test1_5.i, test1_5.__spd_url
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=36)
                           Output: test1_5.__spd_url, test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  HashAggregate  (cost=3438.60..3442.86 rows=341 width=68)
                     Output: test1_4.__spd_url, avg(test1_4.i), test1_4.i
                     Group Key: test1_4.i, test1_4.__spd_url
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=36)
                           Output: test1_4.__spd_url, test1_4.i
                             SQLite query: SELECT `i` FROM main."test1"
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: test1_2.__spd_url, avg(test1_2.i), test1_2.i
                     Group Key: test1_2.i, test1_2.__spd_url
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_2.__spd_url, test1_2.i
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
                     Output: test1_3.__spd_url, avg(test1_3.i), test1_3.i
                     Group Key: test1_3.i, test1_3.__spd_url
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_3.__spd_url, test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: test1.__spd_url, avg(test1.i), test1.i
                     Group Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.__spd_url, test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=68)
                     Output: test1_1.__spd_url, avg(test1_1.i), test1_1.i
                     Group Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.__spd_url, test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(47 rows)

--Testcase 61:
SELECT __spd_url, avg(i) FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
  __spd_url   |          avg           
--------------+------------------------
 /file_svr/   | 1.00000000000000000000
 /file_svr2/  | 1.00000000000000000000
 /mysql_svr/  | 1.00000000000000000000
 /sqlite_svr/ | 1.00000000000000000000
 /tiny_svr/   | 1.00000000000000000000
 /file_svr/   |     2.0000000000000000
 /file_svr2/  |     2.0000000000000000
 /file_svr/   |     3.0000000000000000
 /file_svr2/  |     3.0000000000000000
 /file_svr/   |     4.0000000000000000
 /file_svr2/  |     4.0000000000000000
 /mysql_svr/  |   777.0000000000000000
 /post_svr/   |  1111.0000000000000000
 /sqlite_svr/ |     22222.000000000000
(14 rows)

--Testcase 222:
EXPLAIN VERBOSE
SELECT __spd_url, sum(i) FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort  (cost=358.13..359.14 rows=404 width=44)
   Output: test1.__spd_url, (sum(test1.i)), test1.i
   Sort Key: test1.i, test1.__spd_url
   ->  Append  (cost=1.11..340.64 rows=404 width=44)
         ->  HashAggregate  (cost=1.11..1.12 rows=1 width=44)
               Output: test1.__spd_url, sum(test1.i), test1.i
               Group Key: test1.i, test1.__spd_url
               ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                     Output: test1.__spd_url, test1.i
                       Foreign File: /tmp/pgtest.csv
                       Foreign File Size: 7 b
         ->  HashAggregate  (cost=1.11..1.12 rows=1 width=44)
               Output: test1_1.__spd_url, sum(test1_1.i), test1_1.i
               Group Key: test1_1.i, test1_1.__spd_url
               ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                     Output: test1_1.__spd_url, test1_1.i
                       Foreign File: /tmp/pgtest.csv
                       Foreign File Size: 7 b
         ->  Foreign Scan  (cost=117.06..167.19 rows=200 width=44)
               Output: test1_2.__spd_url, (sum(test1_2.i)), test1_2.i
                 Local server startup cost: 10
                 Remote query: SELECT sum(`i`), `i` FROM `test`.`test1` GROUP BY 2
         ->  Foreign Scan  (cost=117.06..167.19 rows=200 width=44)
               Output: test1_3.__spd_url, (sum(test1_3.i)), test1_3.i
                 Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                 Remote SQL: SELECT sum(i), i FROM public.test1 GROUP BY 2
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=44)
               Output: test1_4.__spd_url, (sum(test1_4.i)), test1_4.i
                 SQLite query: SELECT sum(`i`), `i` FROM main."test1" GROUP BY 2
         ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=44)
               Output: test1_5.__spd_url, (sum(test1_5.i)), test1_5.i
                 TinyBrace query: SELECT sum(`i`), `i` FROM "test1" GROUP BY 2
                 TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(33 rows)

--Testcase 62:
SELECT __spd_url, sum(i) FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
  __spd_url   |  sum  
--------------+-------
 /file_svr/   |     1
 /file_svr2/  |     1
 /mysql_svr/  |     1
 /sqlite_svr/ |     1
 /tiny_svr/   |     1
 /file_svr/   |     2
 /file_svr2/  |     2
 /file_svr/   |     3
 /file_svr2/  |     3
 /file_svr/   |     4
 /file_svr2/  |     4
 /mysql_svr/  |  3108
 /post_svr/   |  1111
 /sqlite_svr/ | 22222
(14 rows)

--Testcase 223:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Gather Merge  (cost=4730.53..4889.20 rows=1360 width=100)
   Output: test1_5.__spd_url, (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
   Workers Planned: 2
   ->  Sort  (cost=3730.50..3732.20 rows=680 width=100)
         Output: test1_5.__spd_url, (avg(test1_5.i)), test1_5.__spd_url, test1_5.i
         Sort Key: test1_5.i, test1_5.__spd_url
         ->  Parallel Append  (cost=3438.60..3698.51 rows=680 width=100)
               ->  HashAggregate  (cost=3448.60..3452.86 rows=341 width=100)
                     Output: test1_5.__spd_url, avg(test1_5.i), test1_5.__spd_url, test1_5.i
                     Group Key: test1_5.i, test1_5.__spd_url
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=36)
                           Output: test1_5.__spd_url, test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  HashAggregate  (cost=3438.60..3442.86 rows=341 width=100)
                     Output: test1_4.__spd_url, avg(test1_4.i), test1_4.__spd_url, test1_4.i
                     Group Key: test1_4.i, test1_4.__spd_url
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=36)
                           Output: test1_4.__spd_url, test1_4.i
                             SQLite query: SELECT `i` FROM main."test1"
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=100)
                     Output: test1_2.__spd_url, avg(test1_2.i), test1_2.__spd_url, test1_2.i
                     Group Key: test1_2.i, test1_2.__spd_url
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_2.__spd_url, test1_2.i
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  HashAggregate  (cost=237.99..242.25 rows=341 width=100)
                     Output: test1_3.__spd_url, avg(test1_3.i), test1_3.__spd_url, test1_3.i
                     Group Key: test1_3.i, test1_3.__spd_url
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_3.__spd_url, test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=100)
                     Output: test1.__spd_url, avg(test1.i), test1.__spd_url, test1.i
                     Group Key: test1.i, test1.__spd_url
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.__spd_url, test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  HashAggregate  (cost=1.11..1.12 rows=1 width=100)
                     Output: test1_1.__spd_url, avg(test1_1.i), test1_1.__spd_url, test1_1.i
                     Group Key: test1_1.i, test1_1.__spd_url
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.__spd_url, test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(47 rows)

--Testcase 63:
SELECT __spd_url, avg(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i,__spd_url;
  __spd_url   |          avg           |  __spd_url   
--------------+------------------------+--------------
 /file_svr/   | 1.00000000000000000000 | /file_svr/
 /file_svr2/  | 1.00000000000000000000 | /file_svr2/
 /mysql_svr/  | 1.00000000000000000000 | /mysql_svr/
 /sqlite_svr/ | 1.00000000000000000000 | /sqlite_svr/
 /tiny_svr/   | 1.00000000000000000000 | /tiny_svr/
 /file_svr/   |     2.0000000000000000 | /file_svr/
 /file_svr2/  |     2.0000000000000000 | /file_svr2/
 /file_svr/   |     3.0000000000000000 | /file_svr/
 /file_svr2/  |     3.0000000000000000 | /file_svr2/
 /file_svr/   |     4.0000000000000000 | /file_svr/
 /file_svr2/  |     4.0000000000000000 | /file_svr2/
 /mysql_svr/  |   777.0000000000000000 | /mysql_svr/
 /post_svr/   |  1111.0000000000000000 | /post_svr/
 /sqlite_svr/ |     22222.000000000000 | /sqlite_svr/
(14 rows)

--Aggregate and function with __spd_url
--Testcase 276:
EXPLAIN VERBOSE
SELECT max(__spd_url), min(__spd_url) from test1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=4669.97..4669.98 rows=1 width=64)
   Output: max(test1_5.__spd_url), min(test1_5.__spd_url)
   ->  Gather  (cost=4430.07..4669.95 rows=4 width=64)
         Output: (PARTIAL max(test1_5.__spd_url)), (PARTIAL min(test1_5.__spd_url))
         Workers Planned: 2
         ->  Parallel Append  (cost=3430.07..3669.55 rows=2 width=64)
               ->  Partial Aggregate  (cost=3440.07..3440.08 rows=1 width=64)
                     Output: PARTIAL max(test1_5.__spd_url), PARTIAL min(test1_5.__spd_url)
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=32)
                           Output: test1_5.__spd_url
                             TinyBrace query: SELECT NULL FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  Partial Aggregate  (cost=3430.07..3430.08 rows=1 width=64)
                     Output: PARTIAL max(test1_4.__spd_url), PARTIAL min(test1_4.__spd_url)
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=32)
                           Output: test1_4.__spd_url
                             SQLite query: SELECT NULL FROM main."test1"
               ->  Partial Aggregate  (cost=229.45..229.46 rows=1 width=64)
                     Output: PARTIAL max(test1_2.__spd_url), PARTIAL min(test1_2.__spd_url)
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=32)
                           Output: test1_2.__spd_url
                             Local server startup cost: 10
                             Remote query: SELECT NULL FROM `test`.`test1`
               ->  Partial Aggregate  (cost=229.45..229.46 rows=1 width=64)
                     Output: PARTIAL max(test1_3.__spd_url), PARTIAL min(test1_3.__spd_url)
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=32)
                           Output: test1_3.__spd_url
                             Remote SQL: SELECT NULL FROM public.test1
               ->  Partial Aggregate  (cost=1.10..1.11 rows=1 width=64)
                     Output: PARTIAL max(test1.__spd_url), PARTIAL min(test1.__spd_url)
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=32)
                           Output: test1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  Partial Aggregate  (cost=1.10..1.11 rows=1 width=64)
                     Output: PARTIAL max(test1_1.__spd_url), PARTIAL min(test1_1.__spd_url)
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=32)
                           Output: test1_1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(40 rows)

--Testcase 277:
SELECT max(__spd_url), min(__spd_url) from test1;
    max     |    min     
------------+------------
 /tiny_svr/ | /file_svr/
(1 row)

--Testcase 278:
EXPLAIN VERBOSE
SELECT lower(__spd_url), upper(__spd_url) from test1 ORDER BY 1, 2;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Gather Merge  (cost=5138.23..6730.61 rows=13648 width=64)
   Output: (lower(test1.__spd_url)), (upper(test1.__spd_url))
   Workers Planned: 2
   ->  Sort  (cost=4138.21..4155.27 rows=6824 width=64)
         Output: (lower(test1.__spd_url)), (upper(test1.__spd_url))
         Sort Key: (lower(test1.__spd_url)), (upper(test1.__spd_url))
         ->  Parallel Append  (cost=10.00..3703.64 rows=6824 width=64)
               ->  Foreign Scan on public.test1_tiny_child1 test1_6  (cost=10.00..3440.07 rows=3413 width=64)
                     Output: lower(test1_6.__spd_url), upper(test1_6.__spd_url)
                       TinyBrace query: SELECT NULL FROM "test1"
                       TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  Foreign Scan on public.test1_sqlite_child1 test1_5  (cost=10.00..3430.07 rows=3413 width=64)
                     Output: lower(test1_5.__spd_url), upper(test1_5.__spd_url)
                       SQLite query: SELECT NULL FROM main."test1"
               ->  Foreign Scan on public.test1_mysql_child1 test1_3  (cost=100.00..229.45 rows=3413 width=64)
                     Output: lower(test1_3.__spd_url), upper(test1_3.__spd_url)
                       Local server startup cost: 10
                       Remote query: SELECT NULL FROM `test`.`test1`
               ->  Foreign Scan on public.test1_post_child1 test1_4  (cost=100.00..229.45 rows=3413 width=64)
                     Output: lower(test1_4.__spd_url), upper(test1_4.__spd_url)
                       Remote SQL: SELECT NULL FROM public.test1
               ->  Foreign Scan on public.test1_file_child1 test1_1  (cost=0.00..1.10 rows=1 width=64)
                     Output: lower(test1_1.__spd_url), upper(test1_1.__spd_url)
                       Foreign File: /tmp/pgtest.csv
                       Foreign File Size: 7 b
               ->  Foreign Scan on public.test1_file_child2 test1_2  (cost=0.00..1.10 rows=1 width=64)
                     Output: lower(test1_2.__spd_url), upper(test1_2.__spd_url)
                       Foreign File: /tmp/pgtest.csv
                       Foreign File Size: 7 b
(29 rows)

--Testcase 279:
SELECT lower(__spd_url), upper(__spd_url) from test1  ORDER BY 1, 2;
    lower     |    upper     
--------------+--------------
 /file_svr/   | /FILE_SVR/
 /file_svr/   | /FILE_SVR/
 /file_svr/   | /FILE_SVR/
 /file_svr/   | /FILE_SVR/
 /file_svr2/  | /FILE_SVR2/
 /file_svr2/  | /FILE_SVR2/
 /file_svr2/  | /FILE_SVR2/
 /file_svr2/  | /FILE_SVR2/
 /mysql_svr/  | /MYSQL_SVR/
 /mysql_svr/  | /MYSQL_SVR/
 /mysql_svr/  | /MYSQL_SVR/
 /mysql_svr/  | /MYSQL_SVR/
 /mysql_svr/  | /MYSQL_SVR/
 /post_svr/   | /POST_SVR/
 /sqlite_svr/ | /SQLITE_SVR/
 /sqlite_svr/ | /SQLITE_SVR/
 /tiny_svr/   | /TINY_SVR/
(17 rows)

--Testcase 280:
EXPLAIN VERBOSE
SELECT pg_typeof(max(i)), pg_typeof(count(*)), pg_typeof(max(__spd_url)) FROM test1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=4687.05..4687.06 rows=1 width=12)
   Output: pg_typeof(max(test1_5.i)), pg_typeof(count(*)), pg_typeof(max(test1_5.__spd_url))
   ->  Gather  (cost=4438.60..4687.02 rows=4 width=44)
         Output: (PARTIAL max(test1_5.i)), (PARTIAL count(*)), (PARTIAL max(test1_5.__spd_url))
         Workers Planned: 2
         ->  Parallel Append  (cost=3438.60..3686.62 rows=2 width=44)
               ->  Partial Aggregate  (cost=3448.60..3448.61 rows=1 width=44)
                     Output: PARTIAL max(test1_5.i), PARTIAL count(*), PARTIAL max(test1_5.__spd_url)
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..3423.00 rows=3413 width=36)
                           Output: test1_5.i, test1_5.__spd_url
                             TinyBrace query: SELECT `i` FROM "test1"
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  Partial Aggregate  (cost=3438.60..3438.61 rows=1 width=44)
                     Output: PARTIAL max(test1_4.i), PARTIAL count(*), PARTIAL max(test1_4.__spd_url)
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..3413.00 rows=3413 width=36)
                           Output: test1_4.i, test1_4.__spd_url
                             SQLite query: SELECT `i` FROM main."test1"
               ->  Partial Aggregate  (cost=237.99..238.00 rows=1 width=44)
                     Output: PARTIAL max(test1_2.i), PARTIAL count(*), PARTIAL max(test1_2.__spd_url)
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_2.i, test1_2.__spd_url
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  Partial Aggregate  (cost=237.99..238.00 rows=1 width=44)
                     Output: PARTIAL max(test1_3.i), PARTIAL count(*), PARTIAL max(test1_3.__spd_url)
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=36)
                           Output: test1_3.i, test1_3.__spd_url
                             Remote SQL: SELECT i FROM public.test1
               ->  Partial Aggregate  (cost=1.11..1.12 rows=1 width=44)
                     Output: PARTIAL max(test1.i), PARTIAL count(*), PARTIAL max(test1.__spd_url)
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1.i, test1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  Partial Aggregate  (cost=1.11..1.12 rows=1 width=44)
                     Output: PARTIAL max(test1_1.i), PARTIAL count(*), PARTIAL max(test1_1.__spd_url)
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=36)
                           Output: test1_1.i, test1_1.__spd_url
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
(40 rows)

--Testcase 281:
SELECT pg_typeof(max(i)), pg_typeof(count(*)), pg_typeof(max(__spd_url)) FROM test1;
 pg_typeof | pg_typeof | pg_typeof 
-----------+-----------+-----------
 integer   | bigint    | text
(1 row)

--Testcase 64:
SELECT sum(i) FROM test1;
  sum  
-------
 26464
(1 row)

--Testcase 65:
SELECT avg(i) FROM test1;
          avg          
-----------------------
 1556.7058823529411765
(1 row)

--Testcase 66:
SELECT avg(i),i FROM test1 group by i order by i;
          avg           |   i   
------------------------+-------
 1.00000000000000000000 |     1
     2.0000000000000000 |     2
     3.0000000000000000 |     3
     4.0000000000000000 |     4
   777.0000000000000000 |   777
  1111.0000000000000000 |  1111
     22222.000000000000 | 22222
(7 rows)

--Testcase 67:
SELECT sum(i),count(i),i FROM test1 group by i order by i;
  sum  | count |   i   
-------+-------+-------
     5 |     5 |     1
     4 |     2 |     2
     6 |     2 |     3
     8 |     2 |     4
  3108 |     4 |   777
  1111 |     1 |  1111
 22222 |     1 | 22222
(7 rows)

--Testcase 68:
SELECT avg(i), count(i) FROM test1 group by i;
          avg           | count 
------------------------+-------
     22222.000000000000 |     1
     3.0000000000000000 |     2
     4.0000000000000000 |     2
     2.0000000000000000 |     2
   777.0000000000000000 |     4
 1.00000000000000000000 |     5
  1111.0000000000000000 |     1
(7 rows)

--Testcase 69:
SELECT SUM(i) as aa, avg(i) FROM test1 GROUP BY i;
  aa   |          avg           
-------+------------------------
 22222 |     22222.000000000000
     6 |     3.0000000000000000
     8 |     4.0000000000000000
     4 |     2.0000000000000000
  3108 |   777.0000000000000000
     5 | 1.00000000000000000000
  1111 |  1111.0000000000000000
(7 rows)

--Testcase 70:
SELECT SUM(i) as aa, avg(i), i/2, SUM(i)/2 FROM test1 GROUP BY i;
  aa   |          avg           | ?column? | ?column? 
-------+------------------------+----------+----------
 22222 |     22222.000000000000 |    11111 |    11111
     6 |     3.0000000000000000 |        1 |        3
     8 |     4.0000000000000000 |        2 |        4
     4 |     2.0000000000000000 |        1 |        2
  3108 |   777.0000000000000000 |      388 |     1554
     5 | 1.00000000000000000000 |        0 |        2
  1111 |  1111.0000000000000000 |      555 |      555
(7 rows)

--Testcase 71:
SELECT SUM(i) as aa, avg(i) FROM test1 GROUP BY i ORDER BY aa;
  aa   |          avg           
-------+------------------------
     4 |     2.0000000000000000
     5 | 1.00000000000000000000
     6 |     3.0000000000000000
     8 |     4.0000000000000000
  1111 |  1111.0000000000000000
  3108 |   777.0000000000000000
 22222 |     22222.000000000000
(7 rows)

--Testcase 72:
SELECT sum(i), avg(i) FROM test1 GROUP BY i ORDER BY 1;
  sum  |          avg           
-------+------------------------
     4 |     2.0000000000000000
     5 | 1.00000000000000000000
     6 |     3.0000000000000000
     8 |     4.0000000000000000
  1111 |  1111.0000000000000000
  3108 |   777.0000000000000000
 22222 |     22222.000000000000
(7 rows)

--Testcase 73:
SELECT i, avg(i) FROM test1 GROUP BY i ORDER BY 1;
   i   |          avg           
-------+------------------------
     1 | 1.00000000000000000000
     2 |     2.0000000000000000
     3 |     3.0000000000000000
     4 |     4.0000000000000000
   777 |   777.0000000000000000
  1111 |  1111.0000000000000000
 22222 |     22222.000000000000
(7 rows)

--Test extract expression when target contains Var which exists in GROUP BY
--Testcase 270:
EXPLAIN VERBOSE
SELECT i/2, i/4 FROM test1 GROUP BY i ORDER BY 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=335.23..335.73 rows=200 width=12)
   Output: ((test1.i / 2)), ((test1.i / 4)), test1.i
   Sort Key: ((test1.i / 2))
   ->  Finalize HashAggregate  (cost=324.59..327.59 rows=200 width=12)
         Output: (test1.i / 2), (test1.i / 4), test1.i
         Group Key: test1.i
         ->  Append  (cost=1.11..323.58 rows=404 width=4)
               ->  Group  (cost=1.11..1.12 rows=1 width=4)
                     Output: test1.i
                     Group Key: test1.i
                     ->  Sort  (cost=1.11..1.11 rows=1 width=0)
                           Output: test1.i
                           Sort Key: test1.i
                           ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=0)
                                 Output: test1.i
                                   Foreign File: /tmp/pgtest.csv
                                   Foreign File Size: 7 b
               ->  Group  (cost=1.11..1.12 rows=1 width=4)
                     Output: test1_1.i
                     Group Key: test1_1.i
                     ->  Sort  (cost=1.11..1.11 rows=1 width=0)
                           Output: test1_1.i
                           Sort Key: test1_1.i
                           ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=0)
                                 Output: test1_1.i
                                   Foreign File: /tmp/pgtest.csv
                                   Foreign File Size: 7 b
               ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=4)
                     Output: test1_2.i
                       Local server startup cost: 10
                       Remote query: SELECT `i` FROM `test`.`test1` GROUP BY 1
               ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=4)
                     Output: test1_3.i
                       Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                       Remote SQL: SELECT i FROM public.test1 GROUP BY 1
               ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=4)
                     Output: test1_4.i
                       SQLite query: SELECT `i` FROM main."test1" GROUP BY 1 ORDER BY `i` ASC NULLS LAST
               ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=4)
                     Output: test1_5.i
                       TinyBrace query: SELECT `i` FROM "test1" GROUP BY 1 ORDER BY `i` IS NULL ASC, `i` ASC
                       TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(42 rows)

--Testcase 271:
SELECT i/2, i/4 FROM test1 GROUP BY i ORDER BY 1;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |        0
        1 |        0
        2 |        1
      388 |      194
      555 |      277
    11111 |     5555
(7 rows)

--Testcase 272:
EXPLAIN VERBOSE
SELECT i/4, avg(i) FROM test1 GROUP BY i ORDER BY 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=500.30..500.80 rows=200 width=40)
   Output: ((test1.i / 4)), (avg(test1.i)), test1.i
   Sort Key: ((test1.i / 4))
   ->  Finalize HashAggregate  (cost=489.66..492.66 rows=200 width=40)
         Output: (test1.i / 4), avg(test1.i), test1.i
         Group Key: test1.i
         ->  Append  (cost=1.10..487.55 rows=422 width=36)
               ->  Partial HashAggregate  (cost=1.10..1.11 rows=1 width=36)
                     Output: test1.i, PARTIAL avg(test1.i)
                     Group Key: test1.i
                     ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=0)
                           Output: test1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  Partial HashAggregate  (cost=1.10..1.11 rows=1 width=36)
                     Output: test1_1.i, PARTIAL avg(test1_1.i)
                     Group Key: test1_1.i
                     ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=0)
                           Output: test1_1.i
                             Foreign File: /tmp/pgtest.csv
                             Foreign File Size: 7 b
               ->  Partial HashAggregate  (cost=229.45..231.45 rows=200 width=36)
                     Output: test1_2.i, PARTIAL avg(test1_2.i)
                     Group Key: test1_2.i
                     ->  Foreign Scan on public.test1_mysql_child1 test1_2  (cost=100.00..212.39 rows=3413 width=4)
                           Output: test1_2.i
                             Local server startup cost: 10
                             Remote query: SELECT `i` FROM `test`.`test1`
               ->  Partial HashAggregate  (cost=229.45..231.45 rows=200 width=36)
                     Output: test1_3.i, PARTIAL avg(test1_3.i)
                     Group Key: test1_3.i
                     ->  Foreign Scan on public.test1_post_child1 test1_3  (cost=100.00..212.39 rows=3413 width=4)
                           Output: test1_3.i
                             Remote SQL: SELECT i FROM public.test1
               ->  Partial GroupAggregate  (cost=10.00..10.15 rows=10 width=36)
                     Output: test1_4.i, PARTIAL avg(test1_4.i)
                     Group Key: test1_4.i
                     ->  Foreign Scan on public.test1_sqlite_child1 test1_4  (cost=10.00..10.00 rows=10 width=4)
                           Output: test1_4.i
                             SQLite query: SELECT `i` FROM main."test1" ORDER BY `i` ASC NULLS LAST
               ->  Partial GroupAggregate  (cost=10.00..10.15 rows=10 width=36)
                     Output: test1_5.i, PARTIAL avg(test1_5.i)
                     Group Key: test1_5.i
                     ->  Foreign Scan on public.test1_tiny_child1 test1_5  (cost=10.00..10.00 rows=10 width=4)
                           Output: test1_5.i
                             TinyBrace query: SELECT `i` FROM "test1" ORDER BY `i` IS NULL ASC, `i` ASC
                             TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(47 rows)

--Testcase 273:
SELECT i/4, avg(i) FROM test1 GROUP BY i ORDER BY 1;
 ?column? |          avg           
----------+------------------------
        0 |     2.0000000000000000
        0 |     3.0000000000000000
        0 | 1.00000000000000000000
        1 |     4.0000000000000000
      194 |   777.0000000000000000
      277 |  1111.0000000000000000
     5555 |     22222.000000000000
(7 rows)

--Testcase 274:
EXPLAIN VERBOSE
SELECT i, i*i FROM test1 GROUP BY i ORDER BY 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=334.73..335.23 rows=200 width=8)
   Output: test1.i, ((test1.i * test1.i))
   Sort Key: test1.i
   ->  Finalize HashAggregate  (cost=324.59..327.09 rows=200 width=8)
         Output: test1.i, (test1.i * test1.i)
         Group Key: test1.i
         ->  Append  (cost=1.11..323.58 rows=404 width=4)
               ->  Group  (cost=1.11..1.12 rows=1 width=4)
                     Output: test1.i
                     Group Key: test1.i
                     ->  Sort  (cost=1.11..1.11 rows=1 width=0)
                           Output: test1.i
                           Sort Key: test1.i
                           ->  Foreign Scan on public.test1_file_child1 test1  (cost=0.00..1.10 rows=1 width=0)
                                 Output: test1.i
                                   Foreign File: /tmp/pgtest.csv
                                   Foreign File Size: 7 b
               ->  Group  (cost=1.11..1.12 rows=1 width=4)
                     Output: test1_1.i
                     Group Key: test1_1.i
                     ->  Sort  (cost=1.11..1.11 rows=1 width=0)
                           Output: test1_1.i
                           Sort Key: test1_1.i
                           ->  Foreign Scan on public.test1_file_child2 test1_1  (cost=0.00..1.10 rows=1 width=0)
                                 Output: test1_1.i
                                   Foreign File: /tmp/pgtest.csv
                                   Foreign File Size: 7 b
               ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=4)
                     Output: test1_2.i
                       Local server startup cost: 10
                       Remote query: SELECT `i` FROM `test`.`test1` GROUP BY 1
               ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=4)
                     Output: test1_3.i
                       Relations: Aggregate on (public.test1__post_svr__0 test1_3)
                       Remote SQL: SELECT i FROM public.test1 GROUP BY 1
               ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=4)
                     Output: test1_4.i
                       SQLite query: SELECT `i` FROM main."test1" GROUP BY 1 ORDER BY `i` ASC NULLS LAST
               ->  Foreign Scan  (cost=1.00..1.00 rows=1 width=4)
                     Output: test1_5.i
                       TinyBrace query: SELECT `i` FROM "test1" GROUP BY 1 ORDER BY `i` IS NULL ASC, `i` ASC
                       TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
(42 rows)

--Testcase 275:
SELECT i, i*i FROM test1 GROUP BY i ORDER BY 1;
   i   | ?column?  
-------+-----------
     1 |         1
     2 |         4
     3 |         9
     4 |        16
   777 |    603729
  1111 |   1234321
 22222 | 493817284
(7 rows)

-- allocate statement
--Testcase 74:
PREPARE stmt AS SELECT sum(i),count(i),i FROM test1 group by i order by i;
-- execute first time
--Testcase 75:
EXECUTE stmt;
  sum  | count |   i   
-------+-------+-------
     5 |     5 |     1
     4 |     2 |     2
     6 |     2 |     3
     8 |     2 |     4
  3108 |     4 |   777
  1111 |     1 |  1111
 22222 |     1 | 22222
(7 rows)

-- performance test prepared statement
DO $$
BEGIN
   FOR counter IN 1..50 LOOP
--Testcase 224:
   EXECUTE 'EXECUTE stmt;';
   END LOOP;
END; $$;
-- deallocate statement
DEALLOCATE stmt;
--Testcase 225:
CREATE TABLE t1 (i int, t text,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 226:
CREATE FOREIGN TABLE t1__post_svr__0 (i int, t text) SERVER post_svr OPTIONS(table_name 't1');
--Testcase 306:
CREATE FOREIGN TABLE t1_post_child1 PARTITION OF t1 FOR VALUES IN ('/post_svr/') SERVER pgspider_svr OPTIONS(child_name 't1__post_svr__0');
--Testcase 76:
SELECT * FROM t1;
 i | t | __spd_url  
---+---+------------
 1 | a | /post_svr/
 2 | b | /post_svr/
 3 | b | /post_svr/
 4 | c | /post_svr/
(4 rows)

--Testcase 77:
SELECT * FROM t1 WHERE __spd_url='/post_svr/' and i = 1 and t = 'a';
 i | t | __spd_url  
---+---+------------
 1 | a | /post_svr/
(1 row)

--Testcase 78:
SELECT sum(i),t FROM t1 group by t;
 sum | t 
-----+---
   1 | a
   5 | b
   4 | c
(3 rows)

--Testcase 79:
SELECT sum(i),t,count(i) FROM t1 group by t;
 sum | t | count 
-----+---+-------
   1 | a |     1
   5 | b |     2
   4 | c |     1
(3 rows)

--Testcase 80:
SELECT * FROM t1 WHERE i = 1;
 i | t | __spd_url  
---+---+------------
 1 | a | /post_svr/
(1 row)

--Testcase 81:
SELECT sum(i),t FROM t1 group by t;
 sum | t 
-----+---
   1 | a
   5 | b
   4 | c
(3 rows)

--Testcase 82:
SELECT avg(i) FROM t1;
        avg         
--------------------
 2.5000000000000000
(1 row)

--Testcase 83:
SELECT stddev(i) FROM t1;
       stddev       
--------------------
 1.2909944487358056
(1 row)

--Testcase 84:
SELECT sum(i),t FROM t1 WHERE i = 1 group by t;
 sum | t 
-----+---
   1 | a
(1 row)

--Testcase 85:
SELECT avg(i),sum(i) FROM t1;
        avg         | sum 
--------------------+-----
 2.5000000000000000 |  10
(1 row)

--Testcase 86:
SELECT sum(i),sum(i) FROM t1;
 sum | sum 
-----+-----
  10 |  10
(1 row)

--Testcase 87:
SELECT avg(i),t FROM t1 group by t;
          avg           | t 
------------------------+---
 1.00000000000000000000 | a
     2.5000000000000000 | b
     4.0000000000000000 | c
(3 rows)

--Testcase 88:
SELECT avg(i) FROM t1 group by i;
          avg           
------------------------
     3.0000000000000000
     4.0000000000000000
     2.0000000000000000
 1.00000000000000000000
(4 rows)

--Testcase 89:
SELECT avg(i), count(i) FROM t1 GROUP BY i ORDER BY i;
          avg           | count 
------------------------+-------
 1.00000000000000000000 |     1
     2.0000000000000000 |     1
     3.0000000000000000 |     1
     4.0000000000000000 |     1
(4 rows)

--Testcase 90:
SELECT t, avg(i), t FROM t1 GROUP BY i, t ORDER BY i;
 t |          avg           | t 
---+------------------------+---
 a | 1.00000000000000000000 | a
 b |     2.0000000000000000 | b
 b |     3.0000000000000000 | b
 c |     4.0000000000000000 | c
(4 rows)

--Testcase 227:
EXPLAIN VERBOSE
SELECT t, __spd_url FROM t1 GROUP BY __spd_url, t ORDER BY t,__spd_url;
                          QUERY PLAN                           
---------------------------------------------------------------
 Sort  (cost=166.31..166.81 rows=200 width=64)
   Output: t1.t, t1.__spd_url
   Sort Key: t1.t, t1.__spd_url
   ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=64)
         Output: t1.t, t1.__spd_url
           Relations: Aggregate on (public.t1__post_svr__0 t1)
           Remote SQL: SELECT t FROM public.t1 GROUP BY 1
(7 rows)

--Testcase 91:
SELECT t, __spd_url FROM t1 GROUP BY __spd_url, t ORDER BY t,__spd_url;
 t | __spd_url  
---+------------
 a | /post_svr/
 b | /post_svr/
 c | /post_svr/
(3 rows)

--Testcase 228:
EXPLAIN VERBOSE
SELECT i, __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                          QUERY PLAN                           
---------------------------------------------------------------
 Sort  (cost=166.31..166.81 rows=200 width=36)
   Output: t1.i, t1.__spd_url
   Sort Key: t1.i, t1.__spd_url
   ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
         Output: t1.i, t1.__spd_url
           Relations: Aggregate on (public.t1__post_svr__0 t1)
           Remote SQL: SELECT i FROM public.t1 GROUP BY 1
(7 rows)

--Testcase 92:
SELECT i, __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 i | __spd_url  
---+------------
 1 | /post_svr/
 2 | /post_svr/
 3 | /post_svr/
 4 | /post_svr/
(4 rows)

--Testcase 229:
EXPLAIN VERBOSE
SELECT __spd_url, i FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                          QUERY PLAN                           
---------------------------------------------------------------
 Sort  (cost=166.31..166.81 rows=200 width=36)
   Output: t1.__spd_url, t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  Foreign Scan  (cost=108.53..158.66 rows=200 width=36)
         Output: t1.__spd_url, t1.i
           Relations: Aggregate on (public.t1__post_svr__0 t1)
           Remote SQL: SELECT i FROM public.t1 GROUP BY 1
(7 rows)

--Testcase 93:
SELECT __spd_url, i FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  | i 
------------+---
 /post_svr/ | 1
 /post_svr/ | 2
 /post_svr/ | 3
 /post_svr/ | 4
(4 rows)

--Testcase 230:
EXPLAIN VERBOSE
SELECT avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=256.60..257.45 rows=341 width=68)
   Output: (avg(t1.i)), t1.__spd_url, t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
         Output: avg(t1.i), t1.__spd_url, t1.i
         Group Key: t1.i, t1.__spd_url
         ->  Foreign Scan on public.t1_post_child1 t1  (cost=100.00..212.39 rows=3413 width=36)
               Output: t1.__spd_url, t1.i
                 Remote SQL: SELECT i FROM public.t1
(9 rows)

--Testcase 94:
SELECT avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
          avg           | __spd_url  
------------------------+------------
 1.00000000000000000000 | /post_svr/
     2.0000000000000000 | /post_svr/
     3.0000000000000000 | /post_svr/
     4.0000000000000000 | /post_svr/
(4 rows)

--Testcase 231:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i) FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=256.60..257.45 rows=341 width=68)
   Output: t1.__spd_url, (avg(t1.i)), t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  HashAggregate  (cost=237.99..242.25 rows=341 width=68)
         Output: t1.__spd_url, avg(t1.i), t1.i
         Group Key: t1.i, t1.__spd_url
         ->  Foreign Scan on public.t1_post_child1 t1  (cost=100.00..212.39 rows=3413 width=36)
               Output: t1.__spd_url, t1.i
                 Remote SQL: SELECT i FROM public.t1
(9 rows)

--Testcase 95:
SELECT __spd_url, avg(i) FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  |          avg           
------------+------------------------
 /post_svr/ | 1.00000000000000000000
 /post_svr/ |     2.0000000000000000
 /post_svr/ |     3.0000000000000000
 /post_svr/ |     4.0000000000000000
(4 rows)

--Testcase 232:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=256.60..257.45 rows=341 width=100)
   Output: t1.__spd_url, (avg(t1.i)), t1.__spd_url, t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  HashAggregate  (cost=237.99..242.25 rows=341 width=100)
         Output: t1.__spd_url, avg(t1.i), t1.__spd_url, t1.i
         Group Key: t1.i, t1.__spd_url
         ->  Foreign Scan on public.t1_post_child1 t1  (cost=100.00..212.39 rows=3413 width=36)
               Output: t1.__spd_url, t1.i
                 Remote SQL: SELECT i FROM public.t1
(9 rows)

--Testcase 96:
SELECT __spd_url, avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  |          avg           | __spd_url  
------------+------------------------+------------
 /post_svr/ | 1.00000000000000000000 | /post_svr/
 /post_svr/ |     2.0000000000000000 | /post_svr/
 /post_svr/ |     3.0000000000000000 | /post_svr/
 /post_svr/ |     4.0000000000000000 | /post_svr/
(4 rows)

--Testcase 233:
EXPLAIN VERBOSE
SELECT __spd_url, sum(i) FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort  (cost=174.84..175.34 rows=200 width=44)
   Output: t1.__spd_url, (sum(t1.i)), t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  Foreign Scan  (cost=117.06..167.19 rows=200 width=44)
         Output: t1.__spd_url, (sum(t1.i)), t1.i
           Relations: Aggregate on (public.t1__post_svr__0 t1)
           Remote SQL: SELECT sum(i), i FROM public.t1 GROUP BY 2
(7 rows)

--Testcase 97:
SELECT __spd_url, sum(i) FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  | sum 
------------+-----
 /post_svr/ |   1
 /post_svr/ |   2
 /post_svr/ |   3
 /post_svr/ |   4
(4 rows)

--Testcase 234:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=256.60..257.45 rows=341 width=100)
   Output: t1.__spd_url, (avg(t1.i)), t1.__spd_url, t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  HashAggregate  (cost=237.99..242.25 rows=341 width=100)
         Output: t1.__spd_url, avg(t1.i), t1.__spd_url, t1.i
         Group Key: t1.i, t1.__spd_url
         ->  Foreign Scan on public.t1_post_child1 t1  (cost=100.00..212.39 rows=3413 width=36)
               Output: t1.__spd_url, t1.i
                 Remote SQL: SELECT i FROM public.t1
(9 rows)

--Testcase 98:
SELECT __spd_url, avg(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  |          avg           | __spd_url  
------------+------------------------+------------
 /post_svr/ | 1.00000000000000000000 | /post_svr/
 /post_svr/ |     2.0000000000000000 | /post_svr/
 /post_svr/ |     3.0000000000000000 | /post_svr/
 /post_svr/ |     4.0000000000000000 | /post_svr/
(4 rows)

--Testcase 235:
EXPLAIN VERBOSE
SELECT __spd_url, avg(i), sum(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort  (cost=265.13..265.98 rows=341 width=108)
   Output: t1.__spd_url, (avg(t1.i)), (sum(t1.i)), t1.__spd_url, t1.i
   Sort Key: t1.i, t1.__spd_url
   ->  HashAggregate  (cost=246.52..250.78 rows=341 width=108)
         Output: t1.__spd_url, avg(t1.i), sum(t1.i), t1.__spd_url, t1.i
         Group Key: t1.i, t1.__spd_url
         ->  Foreign Scan on public.t1_post_child1 t1  (cost=100.00..212.39 rows=3413 width=36)
               Output: t1.__spd_url, t1.i
                 Remote SQL: SELECT i FROM public.t1
(9 rows)

--Testcase 99:
SELECT __spd_url, avg(i), sum(i), __spd_url FROM t1 GROUP BY __spd_url, i ORDER BY i,__spd_url;
 __spd_url  |          avg           | sum | __spd_url  
------------+------------------------+-----+------------
 /post_svr/ | 1.00000000000000000000 |   1 | /post_svr/
 /post_svr/ |     2.0000000000000000 |   2 | /post_svr/
 /post_svr/ |     3.0000000000000000 |   3 | /post_svr/
 /post_svr/ |     4.0000000000000000 |   4 | /post_svr/
(4 rows)

--Testcase 100:
SELECT * FROM (SELECT sum(i) FROM t1) A,(SELECT count(i) FROM t1) B;
 sum | count 
-----+-------
  10 |     4
(1 row)

--Testcase 101:
SELECT SUM(i) as aa, avg(i) FROM t1 GROUP BY i;
 aa |          avg           
----+------------------------
  3 |     3.0000000000000000
  4 |     4.0000000000000000
  2 |     2.0000000000000000
  1 | 1.00000000000000000000
(4 rows)

--Testcase 102:
SELECT SUM(i) as aa, avg(i) FROM t1 GROUP BY t;
 aa |          avg           
----+------------------------
  1 | 1.00000000000000000000
  5 |     2.5000000000000000
  4 |     4.0000000000000000
(3 rows)

--Testcase 103:
SELECT SUM(i) as aa, avg(i), i/2, SUM(i)/2 FROM t1 GROUP BY i, t;
 aa |          avg           | ?column? | ?column? 
----+------------------------+----------+----------
  4 |     4.0000000000000000 |        2 |        2
  3 |     3.0000000000000000 |        1 |        1
  1 | 1.00000000000000000000 |        0 |        0
  2 |     2.0000000000000000 |        1 |        1
(4 rows)

--Testcase 104:
SELECT SUM(i) as aa, avg(i) FROM t1 GROUP BY i ORDER BY aa;
 aa |          avg           
----+------------------------
  1 | 1.00000000000000000000
  2 |     2.0000000000000000
  3 |     3.0000000000000000
  4 |     4.0000000000000000
(4 rows)

-- query contains all constant
--Testcase 236:
SELECT 1, 2, 'asd$@' FROM t1 group by 1, 3, 2;
 ?column? | ?column? | ?column? 
----------+----------+----------
        1 |        2 | asd$@
(1 row)

-- allocate statement
--Testcase 105:
PREPARE stmt AS SELECT * FROM t1;
-- execute first time
--Testcase 106:
EXECUTE stmt;
 i | t | __spd_url  
---+---+------------
 1 | a | /post_svr/
 2 | b | /post_svr/
 3 | b | /post_svr/
 4 | c | /post_svr/
(4 rows)

-- performance test prepared statement
DO $$
BEGIN
   FOR counter IN 1..50 LOOP
--Testcase 237:
   EXECUTE 'EXECUTE stmt;';
   END LOOP;
END; $$;
-- deallocate statement
DEALLOCATE stmt;
--Testcase 107:
EXPLAIN (VERBOSE, COSTS OFF) SELECT STDDEV(i) FROM t1;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   Output: stddev(t1.i)
   ->  Foreign Scan on public.t1_post_child1 t1
         Output: t1.i
           Remote SQL: SELECT i FROM public.t1
(5 rows)

--Testcase 238:
CREATE TABLE t3 (t text, t2 text, i int,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 239:
CREATE FOREIGN TABLE t3__mysql_svr__0 (t text,t2 text,i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test3');
--Testcase 307:
CREATE FOREIGN TABLE t3_mysql_child1 PARTITION OF t3 FOR VALUES IN ('/mysql_svr/') SERVER pgspider_svr OPTIONS(child_name 't3__mysql_svr__0');
--Testcase 108:
SELECT count(t) FROM t3;
 count 
-------
     4
(1 row)

--Testcase 109:
SELECT count(t2) FROM t3;
 count 
-------
     3
(1 row)

--Testcase 110:
SELECT count(i) FROM t3;
 count 
-------
     4
(1 row)

--Testcase 111:
SELECT * FROM t3;
  t  | t2  | i |  __spd_url  
-----+-----+---+-------------
 aaa | bbb | 1 | /mysql_svr/
 aaa | bbb | 1 | /mysql_svr/
 aaa |     | 1 | /mysql_svr/
 aaa | bbb | 1 | /mysql_svr/
(4 rows)

-- test target list push down for mysql fdw
-- push down abs(-i*2) and i+1
--Testcase 112:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT abs(-i*2), i+1, i, i FROM t3;
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan on public.t3_mysql_child1 t3
   Output: abs(((- t3.i) * 2)), (t3.i + 1), t3.i, t3.i
     Remote query: SELECT `i` FROM `test`.`test3`
(3 rows)

--Testcase 113:
SELECT abs(-i*2), i+1, i, i FROM t3;
 abs | ?column? | i | i 
-----+----------+---+---
   2 |        2 | 1 | 1
   2 |        2 | 1 | 1
   2 |        2 | 1 | 1
   2 |        2 | 1 | 1
(4 rows)

-- can't push down abs(A.i) in join case
--Testcase 114:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT abs(A.i) FROM t3 A, t3 B LIMIT 3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: (abs(a.i))
   ->  Nested Loop
         Output: abs(a.i)
         ->  Foreign Scan on public.t3_mysql_child1 a
               Output: a.i
                 Remote query: SELECT `i` FROM `test`.`test3`
         ->  Materialize
               ->  Foreign Scan on public.t3_mysql_child1 b
                       Remote query: SELECT NULL FROM `test`.`test3`
(10 rows)

--Testcase 115:
SELECT abs(A.i) FROM t3 A, t3 B LIMIT 3;
 abs 
-----
   1
   1
   1
(3 rows)

--Testcase 116:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT abs(i) c1 FROM t3 UNION SELECT abs(i+1) FROM t3 ORDER BY c1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: (abs(t3.i))
   Sort Key: (abs(t3.i))
   ->  HashAggregate
         Output: (abs(t3.i))
         Group Key: (abs(t3.i))
         ->  Append
               ->  Foreign Scan on public.t3_mysql_child1 t3
                     Output: abs(t3.i)
                       Remote query: SELECT `i` FROM `test`.`test3`
               ->  Foreign Scan on public.t3_mysql_child1 t3_1
                     Output: abs((t3_1.i + 1))
                       Remote query: SELECT `i` FROM `test`.`test3`
(13 rows)

--Testcase 117:
SELECT abs(i) c1 FROM t3 UNION SELECT abs(i+1) FROM t3 ORDER BY c1;
 c1 
----
  1
  2
(2 rows)

--Testcase 118:
SELECT i+1, __spd_url FROM t3;
 ?column? |  __spd_url  
----------+-------------
        2 | /mysql_svr/
        2 | /mysql_svr/
        2 | /mysql_svr/
        2 | /mysql_svr/
(4 rows)

--Testcase 119:
SELECT i, __spd_url FROM t3 ORDER BY i, __spd_url;
 i |  __spd_url  
---+-------------
 1 | /mysql_svr/
 1 | /mysql_svr/
 1 | /mysql_svr/
 1 | /mysql_svr/
(4 rows)

--Testcase 120:
SELECT i FROM t3 ORDER BY __spd_url;
 i 
---
 1
 1
 1
 1
(4 rows)

-- can't push down i+1 because test1 includes fdws other than mysql fdw
--Testcase 121:
EXPLAIN (VERBOSE, COSTS OFF) 
SELECT i+1,__spd_url FROM test1 ORDER BY __spd_url, i;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Merge
   Output: ((test1.i + 1)), test1.__spd_url, test1.i
   Workers Planned: 2
   ->  Sort
         Output: ((test1.i + 1)), test1.__spd_url, test1.i
         Sort Key: test1.__spd_url, test1.i
         ->  Parallel Append
               ->  Foreign Scan on public.test1_tiny_child1 test1_6
                     Output: (test1_6.i + 1), test1_6.__spd_url, test1_6.i
                       TinyBrace query: SELECT `i` FROM "test1"
                       TinyBrace plan: SCAN TABLE test1 (~1000000 rows)
               ->  Foreign Scan on public.test1_sqlite_child1 test1_5
                     Output: (test1_5.i + 1), test1_5.__spd_url, test1_5.i
                       SQLite query: SELECT `i` FROM main."test1"
               ->  Foreign Scan on public.test1_mysql_child1 test1_3
                     Output: (test1_3.i + 1), test1_3.__spd_url, test1_3.i
                       Remote query: SELECT `i` FROM `test`.`test1`
               ->  Foreign Scan on public.test1_post_child1 test1_4
                     Output: (test1_4.i + 1), test1_4.__spd_url, test1_4.i
                       Remote SQL: SELECT i FROM public.test1
               ->  Foreign Scan on public.test1_file_child1 test1_1
                     Output: (test1_1.i + 1), test1_1.__spd_url, test1_1.i
                       Foreign File: /tmp/pgtest.csv
               ->  Foreign Scan on public.test1_file_child2 test1_2
                     Output: (test1_2.i + 1), test1_2.__spd_url, test1_2.i
                       Foreign File: /tmp/pgtest.csv
(26 rows)

--Testcase 122:
SELECT i+1,__spd_url FROM test1  ORDER BY __spd_url, i;
 ?column? |  __spd_url   
----------+--------------
        2 | /file_svr/
        3 | /file_svr/
        4 | /file_svr/
        5 | /file_svr/
        2 | /file_svr2/
        3 | /file_svr2/
        4 | /file_svr2/
        5 | /file_svr2/
        2 | /mysql_svr/
      778 | /mysql_svr/
      778 | /mysql_svr/
      778 | /mysql_svr/
      778 | /mysql_svr/
     1112 | /post_svr/
        2 | /sqlite_svr/
    22223 | /sqlite_svr/
        2 | /tiny_svr/
(17 rows)

--Testcase 123:
SELECT __spd_url,i FROM test1 ORDER BY __spd_url, i;
  __spd_url   |   i   
--------------+-------
 /file_svr/   |     1
 /file_svr/   |     2
 /file_svr/   |     3
 /file_svr/   |     4
 /file_svr2/  |     1
 /file_svr2/  |     2
 /file_svr2/  |     3
 /file_svr2/  |     4
 /mysql_svr/  |     1
 /mysql_svr/  |   777
 /mysql_svr/  |   777
 /mysql_svr/  |   777
 /mysql_svr/  |   777
 /post_svr/   |  1111
 /sqlite_svr/ |     1
 /sqlite_svr/ | 22222
 /tiny_svr/   |     1
(17 rows)

-- t is not included in target list, but is pushed down, it is OK
--Testcase 124:
select t from t3 where i  = 1;
  t  
-----
 aaa
 aaa
 aaa
 aaa
(4 rows)

-- t is not included and cannot be pushed down, so it is error
-- select i from t3 where t COLLATE "ja_JP.utf8" = 'aa';
-- error stack test
-- PGSpider Extension does not have this variable
-- Set pgspider_core_fdw.throw_error_ifdead to false;
--Testcase 240:
CREATE SERVER mysql_svr2 FOREIGN DATA WRAPPER mysql_fdw OPTIONS (host '127.0.0.1',port '3306');
--Testcase 241:
CREATE USER mapping for public server mysql_svr2 OPTIONS(username 'root',password 'wrongpass');
--Testcase 242:
CREATE FOREIGN TABLE t3__mysql_svr2__0 (t text,t2 text,i int) SERVER mysql_svr2 OPTIONS(dbname 'test',table_name 'test3');
--Testcase 308:
CREATE FOREIGN TABLE t3_mysql_child2 PARTITION OF t3 FOR VALUES IN ('/mysql_svr2/') SERVER pgspider_svr OPTIONS(child_name 't3__mysql_svr2__0');
-- PGSpider Extension displays error and stop processing immediately when one child node has error
--Testcase 125:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 126:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 127:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 128:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 129:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 130:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 131:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 132:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 133:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 134:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 135:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 136:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 137:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 138:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 139:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 140:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 141:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 142:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 143:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 144:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 145:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 146:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 147:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 148:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 149:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 150:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 151:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 152:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 153:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 154:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 155:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
--Testcase 156:
SELECT count(t) FROM t3;
ERROR:  failed to connect to MySQL: Access denied for user 'root'@'localhost' (using password: YES)
-- Set pgspider_core_fdw.throw_error_ifdead to true;
--Testcase 243:
DROP TABLE t3;
--Testcase 244:
DROP FOREIGN TABLE t3__mysql_svr__0;
--Testcase 245:
DROP FOREIGN TABLE t3__mysql_svr2__0;
-- wrong result:
-- SELECT sum(i),t  FROM t1 group by t having sum(i) > 2;
--  sum | t 
-- -----+---
--    1 | a
--    5 | b
--    4 | c
-- (3 rows)
-- stress test for finding multithread error
DO $$
BEGIN
   FOR counter IN 1..50 LOOP
   PERFORM sum(i) FROM test1;
   END LOOP;
END; $$;
--Testcase 246:
CREATE TABLE mysqlt (t text, t2 text, i int,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 247:
CREATE FOREIGN TABLE mysqlt__mysql_svr__0 (t text,t2 text,i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test3');
--Testcase 309:
CREATE FOREIGN TABLE mysqlt_mysql_child0 PARTITION OF mysqlt FOR VALUES IN ('/mysql_svr0/') SERVER pgspider_svr OPTIONS(child_name 'mysqlt__mysql_svr__0');
--Testcase 248:
CREATE FOREIGN TABLE mysqlt__mysql_svr__1 (t text,t2 text,i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test3');
--Testcase 310:
CREATE FOREIGN TABLE mysqlt_mysql_child1 PARTITION OF mysqlt FOR VALUES IN ('/mysql_svr1/') SERVER pgspider_svr OPTIONS(child_name 'mysqlt__mysql_svr__1');
--Testcase 249:
CREATE FOREIGN TABLE mysqlt__mysql_svqr__2 (t text,t2 text,i int) SERVER mysql_svr OPTIONS(dbname 'test',table_name 'test3');
--Testcase 311:
CREATE FOREIGN TABLE mysqlt_mysql_child2 PARTITION OF mysqlt FOR VALUES IN ('/mysql_svr2/') SERVER pgspider_svr OPTIONS(child_name 'mysqlt__mysql_svqr__2');
DO $$
BEGIN
   FOR counter IN 1..50 LOOP
   PERFORM sum(i) FROM mysqlt;
   END LOOP;
END; $$;
--Testcase 250:
CREATE TABLE post_large (i int, t text,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 251:
CREATE FOREIGN TABLE post_large__post_svr__1 (i int, t text) SERVER post_svr OPTIONS(table_name 'large_t');
--Testcase 312:
CREATE FOREIGN TABLE post_large_post_child1 PARTITION OF post_large FOR VALUES IN ('/post_svr_1/') SERVER pgspider_svr OPTIONS(child_name 'post_large__post_svr__1');
--Testcase 252:
CREATE FOREIGN TABLE post_large__post_svr__2 (i int, t text) SERVER post_svr OPTIONS(table_name 'large_t');
--Testcase 313:
CREATE FOREIGN TABLE post_large_post_child2 PARTITION OF post_large FOR VALUES IN ('/post_svr_2/') SERVER pgspider_svr OPTIONS(child_name 'post_large__post_svr__2');
--Testcase 253:
CREATE FOREIGN TABLE post_large__post_svr__3 (i int, t text) SERVER post_svr OPTIONS(table_name 'large_t');
--Testcase 314:
CREATE FOREIGN TABLE post_large_post_child3 PARTITION OF post_large FOR VALUES IN ('/post_svr_3/') SERVER pgspider_svr OPTIONS(child_name 'post_large__post_svr__3');
--Testcase 157:
SELECT i,t FROM post_large WHERE i < 3 ORDER BY i,t;
 i |  t  
---+-----
 1 | aa1
 1 | aa1
 1 | aa1
 2 | aa2
 2 | aa2
 2 | aa2
(6 rows)

DO $$
BEGIN
   FOR counter IN 1..10 LOOP
   PERFORM i,t FROM post_large WHERE i < 3 ORDER BY i,t;
   END LOOP;
END; $$;
--Testcase 158:
SELECT count(*) FROM post_large;
 count 
-------
 30000
(1 row)

DO $$
BEGIN
   FOR counter IN 1..10 LOOP
   PERFORM sum(i) FROM post_large;
   END LOOP;
END; $$;
--Testcase 254:
CREATE TABLE t2 (i int, t text, a text,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 255:
CREATE FOREIGN TABLE t2__post_svr__0 (i int, t text,a text) SERVER post_svr OPTIONS(table_name 't2');
--Testcase 315:
CREATE FOREIGN TABLE t2_post_child1 PARTITION OF t2 FOR VALUES IN ('/post_svr_0/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr__0');
--Testcase 159:
SELECT i,t,a FROM t2 ORDER BY i,__spd_url;
 i | t | a 
---+---+---
 1 | a | 
 2 |   | a
   | a | a
   |   | 
(4 rows)

--Testcase 256:
CREATE FOREIGN TABLE t2__post_svr__1 (i int, t text,a text) SERVER post_svr OPTIONS(table_name 't2');
--Testcase 316:
CREATE FOREIGN TABLE t2_post_child2 PARTITION OF t2 FOR VALUES IN ('/post_svr_1/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr__1');
--Testcase 257:
CREATE FOREIGN TABLE t2__post_svr__2 (i int, t text,a text) SERVER post_svr OPTIONS(table_name 't2');
--Testcase 317:
CREATE FOREIGN TABLE t2_post_child3 PARTITION OF t2 FOR VALUES IN ('/post_svr_2/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr__2');
--Testcase 258:
CREATE FOREIGN TABLE t2__post_svr__3 (i int, t text,a text) SERVER post_svr OPTIONS(table_name 't2');
--Testcase 318:
CREATE FOREIGN TABLE t2_post_child4 PARTITION OF t2 FOR VALUES IN ('/post_svr_3/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr__3');
-- random cannot be pushed down and i=2 is pushed down
--Testcase 160:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM t2 WHERE i=2 AND random() < 2.0;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Append
   ->  Foreign Scan on public.t2_post_child1 t2_1
         Output: t2_1.i, t2_1.t, t2_1.a, t2_1.__spd_url
         Filter: (random() < '2'::double precision)
           Remote SQL: SELECT i, t, a FROM public.t2 WHERE ((i = 2))
   ->  Foreign Scan on public.t2_post_child2 t2_2
         Output: t2_2.i, t2_2.t, t2_2.a, t2_2.__spd_url
         Filter: (random() < '2'::double precision)
           Remote SQL: SELECT i, t, a FROM public.t2 WHERE ((i = 2))
   ->  Foreign Scan on public.t2_post_child3 t2_3
         Output: t2_3.i, t2_3.t, t2_3.a, t2_3.__spd_url
         Filter: (random() < '2'::double precision)
           Remote SQL: SELECT i, t, a FROM public.t2 WHERE ((i = 2))
   ->  Foreign Scan on public.t2_post_child4 t2_4
         Output: t2_4.i, t2_4.t, t2_4.a, t2_4.__spd_url
         Filter: (random() < '2'::double precision)
           Remote SQL: SELECT i, t, a FROM public.t2 WHERE ((i = 2))
(17 rows)

--Testcase 161:
SELECT * FROM t2 WHERE i=2 AND random() < 2.0;
 i | t | a |  __spd_url   
---+---+---+--------------
 2 |   | a | /post_svr_0/
 2 |   | a | /post_svr_1/
 2 |   | a | /post_svr_2/
 2 |   | a | /post_svr_3/
(4 rows)

--Testcase 162:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
 i | t | a 
---+---+---
 1 | a | 
 1 | a | 
 1 | a | 
 1 | a | 
 2 |   | a
 2 |   | a
 2 |   | a
 2 |   | a
   | a | a
   | a | a
   | a | a
   | a | a
   |   | 
   |   | 
   |   | 
   |   | 
(16 rows)

--Testcase 163:
SELECT a,i, __spd_url, t FROM t2 ORDER BY i,t,a,__spd_url;
 a | i |  __spd_url   | t 
---+---+--------------+---
   | 1 | /post_svr_0/ | a
   | 1 | /post_svr_1/ | a
   | 1 | /post_svr_2/ | a
   | 1 | /post_svr_3/ | a
 a | 2 | /post_svr_0/ | 
 a | 2 | /post_svr_1/ | 
 a | 2 | /post_svr_2/ | 
 a | 2 | /post_svr_3/ | 
 a |   | /post_svr_0/ | a
 a |   | /post_svr_1/ | a
 a |   | /post_svr_2/ | a
 a |   | /post_svr_3/ | a
   |   | /post_svr_0/ | 
   |   | /post_svr_1/ | 
   |   | /post_svr_2/ | 
   |   | /post_svr_3/ | 
(16 rows)

--Testcase 164:
SELECT __spd_url,i FROM t2 WHERE __spd_url='/post_svr_0/' ORDER BY i LIMIT 1;
  __spd_url   | i 
--------------+---
 /post_svr_0/ | 1
(1 row)

-- Keep alive test
--Testcase 259:
CREATE SERVER post_svr2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1',port '49503');
--Testcase 260:
CREATE USER mapping for public server post_svr2 OPTIONS(user 'postgres',password 'postgres');
--Testcase 261:
CREATE FOREIGN TABLE t2__post_svr2__0 (i int, t text,a text) SERVER post_svr2 OPTIONS(table_name 't2');
--Testcase 319:
CREATE FOREIGN TABLE t2_post_child5 PARTITION OF t2 FOR VALUES IN ('/post_svr2_0/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr2__0');
-- --Testcase 165:
-- INSERT INTO pg_spd_node_info VALUES(0,'post_svr','postgres_fdw','127.0.0.1');
-- --Testcase 166:
-- INSERT INTO pg_spd_node_info VALUES(0,'post_svr2','postgres_fdw','127.0.0.1');
--Testcase 167:
SELECT pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

-- PGSpider Extension displays error and stop processing immediately when one child node has error
-- Set pgspider_core_fdw.throw_error_ifdead to false;
--Testcase 168:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;;
ERROR:  could not connect to server "post_svr2"
DETAIL:  could not connect to server: Connection refused
	Is the server running on host "127.0.0.1" and accepting
	TCP/IP connections on port 49503?
-- SET pgspider_core_fdw.throw_error_ifdead to true;
--Testcase 169:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;;
ERROR:  could not connect to server "post_svr2"
DETAIL:  could not connect to server: Connection refused
	Is the server running on host "127.0.0.1" and accepting
	TCP/IP connections on port 49503?
-- SET pgspider_core_fdw.throw_error_ifdead to false;
--Testcase 170:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;;
ERROR:  could not connect to server "post_svr2"
DETAIL:  could not connect to server: Connection refused
	Is the server running on host "127.0.0.1" and accepting
	TCP/IP connections on port 49503?
-- SET pgspider_core_fdw.print_error_nodes to true;
--Testcase 171:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;;
ERROR:  could not connect to server "post_svr2"
DETAIL:  could not connect to server: Connection refused
	Is the server running on host "127.0.0.1" and accepting
	TCP/IP connections on port 49503?
-- SET pgspider_core_fdw.print_error_nodes to false;
--Testcase 172:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;;
ERROR:  could not connect to server "post_svr2"
DETAIL:  could not connect to server: Connection refused
	Is the server running on host "127.0.0.1" and accepting
	TCP/IP connections on port 49503?
--Testcase 262:
CREATE SERVER post_svr3 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '192.168.11.12',port '15432');
--Testcase 263:
CREATE USER mapping for public server post_svr3 OPTIONS(user 'postgres',password 'postgres');
--Testcase 264:
CREATE FOREIGN TABLE t2__post_svr3__0 (i int, t text,a text) SERVER post_svr3 OPTIONS(table_name 't2');
--Testcase 320:
CREATE FOREIGN TABLE t2_post_child6 PARTITION OF t2 FOR VALUES IN ('/post_svr3_0/') SERVER pgspider_svr OPTIONS(child_name 't2__post_svr3__0');
-- --Testcase 173:
-- INSERT INTO pg_spd_node_info VALUES(0,'post_svr3','postgres_fdw','192.168.11.12');
--Testcase 174:
SELECT pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

/*
--Testcase 175:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
SET pgspider_core_fdw.throw_error_ifdead to true;
--Testcase 176:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
SET pgspider_core_fdw.throw_error_ifdead to false;
--Testcase 177:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
SET pgspider_core_fdw.print_error_nodes to true;
--Testcase 178:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
SET pgspider_core_fdw.print_error_nodes to false;
--Testcase 179:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
DROP FOREIGN TABLE t2__post_svr3__0;
--Testcase 180:
DELETE FROM pg_spd_node_info WHERE servername = 't2__post_svr3__0';
--Testcase 181:
SELECT pg_sleep(2);
--Testcase 182:
SELECT i,t,a FROM t2 ORDER BY i,t,a,__spd_url;
*/
-- Test CoerceViaIO type
--Testcase 282:
CREATE TABLE tbl01 (c1 timestamp without time zone, c2 timestamp with time zone, __spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 283:
CREATE FOREIGN TABLE tbl01__sqlite_svr__0 (c1 timestamp without time zone, c2 timestamp with time zone) SERVER sqlite_svr OPTIONS(table 'tbl01');
--Testcase 321:
CREATE FOREIGN TABLE tbl01_sqlite_child1 PARTITION OF tbl01 FOR VALUES IN ('/sqlite_svr/') SERVER pgspider_svr OPTIONS(child_name 'tbl01__sqlite_svr__0');
--Testcase 284:
SELECT * FROM tbl01;
            c1            |               c2                |  __spd_url   
--------------------------+---------------------------------+--------------
 Sat Jan 01 00:00:00 2000 | Fri Dec 31 14:00:00 1999 PST    | /sqlite_svr/
 Mon Jan 01 00:00:00 0001 | Sun Dec 31 11:00:00 0001 PST BC | /sqlite_svr/
 Mon Oct 19 10:23:54 2015 | Sun Oct 18 20:23:54 2015 PDT    | /sqlite_svr/
 Sat Jan 01 04:30:00 2000 | Fri Dec 31 10:30:00 1999 PST    | /sqlite_svr/
 Sun May 13 00:00:00 2001 | Sun May 13 00:00:00 2001 PDT    | /sqlite_svr/
 Tue Oct 19 10:23:54 2004 | Mon Oct 18 22:23:54 2004 PDT    | /sqlite_svr/
 Sat Oct 19 15:20:54 2019 | Sat Oct 19 10:20:54 2019 PDT    | /sqlite_svr/
 Fri Oct 29 10:25:56 2004 | Fri Oct 29 00:25:56 2004 PDT    | /sqlite_svr/
 Mon Jan 01 00:00:00 2001 | Mon Jan 01 00:00:00 2001 PST    | /sqlite_svr/
(9 rows)

--Testcase 285:
SELECT c1 || 'time1', c2 || 'time2' FROM tbl01 GROUP BY c1, c2;
           ?column?            |               ?column?               
-------------------------------+--------------------------------------
 Mon Jan 01 00:00:00 0001time1 | Sun Dec 31 11:00:00 0001 PST BCtime2
 Sat Jan 01 00:00:00 2000time1 | Fri Dec 31 14:00:00 1999 PSTtime2
 Sat Jan 01 04:30:00 2000time1 | Fri Dec 31 10:30:00 1999 PSTtime2
 Mon Jan 01 00:00:00 2001time1 | Mon Jan 01 00:00:00 2001 PSTtime2
 Sun May 13 00:00:00 2001time1 | Sun May 13 00:00:00 2001 PDTtime2
 Tue Oct 19 10:23:54 2004time1 | Mon Oct 18 22:23:54 2004 PDTtime2
 Fri Oct 29 10:25:56 2004time1 | Fri Oct 29 00:25:56 2004 PDTtime2
 Mon Oct 19 10:23:54 2015time1 | Sun Oct 18 20:23:54 2015 PDTtime2
 Sat Oct 19 15:20:54 2019time1 | Sat Oct 19 10:20:54 2019 PDTtime2
(9 rows)

--Testcase 286:
DROP FOREIGN TABLE tbl01__sqlite_svr__0;
--Testcase 287:
DROP TABLE tbl01;
-- Test select operator expressions which contain different data type, with WHERE clause contains __spd_url
--Testcase 288:
CREATE TABLE tbl02 (c1 double precision, c2 integer, c3 real, c4 smallint, c5 bigint, c6 numeric,__spd_url text) PARTITION BY LIST (__spd_url);
--Testcase 289:
CREATE FOREIGN TABLE tbl02__sqlite_svr__0 (c1 double precision, c2 integer, c3 real, c4 smallint, c5 bigint, c6 numeric) SERVER sqlite_svr OPTIONS(table 'tbl02');
--Testcase 322:
CREATE FOREIGN TABLE tbl02_sqlite_child1 PARTITION OF tbl02 FOR VALUES IN ('/sqlite_svr/') SERVER pgspider_svr OPTIONS(child_name 'tbl02__sqlite_svr__0');
--Testcase 290:
SELECT * FROM tbl02;
  c1   | c2  | c3  | c4 | c5  |   c6   |  __spd_url   
-------+-----+-----+----+-----+--------+--------------
  1.55 | 100 | 2.3 |  1 | 243 |      6 | /sqlite_svr/
  2.77 | 123 | 1.2 |  2 | 246 |   7.12 | /sqlite_svr/
 -2.16 |  54 | 3.6 |  3 | 123 | 8.2201 | /sqlite_svr/
(3 rows)

--Testcase 291:
EXPLAIN VERBOSE
SELECT c1-c2, c2-c3, c3-c4, c3-c5, c5-c6 FROM tbl02 WHERE __spd_url != '$';
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tbl02_sqlite_child1 tbl02  (cost=10.00..3498.32 rows=3413 width=64)
   Output: (tbl02.c1 - (tbl02.c2)::double precision), ((tbl02.c2)::double precision - tbl02.c3), (tbl02.c3 - (tbl02.c4)::double precision), (tbl02.c3 - (tbl02.c5)::double precision), ((tbl02.c5)::numeric - tbl02.c6)
   Filter: (tbl02.__spd_url <> '$'::text)
     SQLite query: SELECT `c1`, `c2`, `c3`, `c4`, `c5`, `c6` FROM main."tbl02"
(4 rows)

--Testcase 292:
SELECT c1-c2, c2-c3, c3-c4, c3-c5, c5-c6 FROM tbl02 WHERE __spd_url != '$';
 ?column? |      ?column?      |      ?column?       |      ?column?       | ?column? 
----------+--------------------+---------------------+---------------------+----------
   -98.45 |  97.70000004768372 |  1.2999999523162842 | -240.70000004768372 |      237
  -120.23 | 121.79999995231628 | -0.7999999523162842 | -244.79999995231628 |   238.88
   -56.16 |  50.40000009536743 |  0.5999999046325684 | -119.40000009536743 | 114.7799
(3 rows)

--Testcase 293:
DROP FOREIGN TABLE tbl02__sqlite_svr__0;
--Testcase 294:
DROP TABLE tbl02;
--Testcase 265:
DROP TABLE test1;
--Testcase 266:
DROP TABLE t1;
--Testcase 267:
DROP TABLE t2;
--Testcase 268:
DROP SERVER pgspider_svr CASCADE;
NOTICE:  drop cascades to 12 other objects
DETAIL:  drop cascades to user mapping for public on server pgspider_svr
drop cascades to foreign table filetbl_child1
drop cascades to foreign table test1_1_tiny_child1
drop cascades to foreign table test1_1_post_child1
drop cascades to foreign table test1_1_sqlite_child1
drop cascades to foreign table test1_1_mysql_child1
drop cascades to foreign table mysqlt_mysql_child0
drop cascades to foreign table mysqlt_mysql_child1
drop cascades to foreign table mysqlt_mysql_child2
drop cascades to foreign table post_large_post_child1
drop cascades to foreign table post_large_post_child2
drop cascades to foreign table post_large_post_child3
--Testcase 269:
DROP EXTENSION pgspider_ext CASCADE;
--Clean
--Testcase 270:
DROP EXTENSION postgres_fdw CASCADE;
NOTICE:  drop cascades to 18 other objects
DETAIL:  drop cascades to server post_svr
drop cascades to user mapping for public on server post_svr
drop cascades to foreign table test1__post_svr__0
drop cascades to foreign table test1_1__post_svr__0
drop cascades to foreign table t1__post_svr__0
drop cascades to foreign table post_large__post_svr__1
drop cascades to foreign table post_large__post_svr__2
drop cascades to foreign table post_large__post_svr__3
drop cascades to foreign table t2__post_svr__0
drop cascades to foreign table t2__post_svr__1
drop cascades to foreign table t2__post_svr__2
drop cascades to foreign table t2__post_svr__3
drop cascades to server post_svr2
drop cascades to user mapping for public on server post_svr2
drop cascades to foreign table t2__post_svr2__0
drop cascades to server post_svr3
drop cascades to user mapping for public on server post_svr3
drop cascades to foreign table t2__post_svr3__0
--Testcase 271:
DROP EXTENSION file_fdw CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to server file_svr
drop cascades to foreign table filetbl__file_svr__0
drop cascades to foreign table test1__file_svr__0
drop cascades to foreign table test1__filesvr2__0
drop cascades to server filesvr2
--Testcase 272:
DROP EXTENSION sqlite_fdw CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to server sqlite_svr
drop cascades to foreign table test1__sqlite_svr__0
drop cascades to foreign table test1_1__sqlite_svr__0
--Testcase 273:
DROP EXTENSION tinybrace_fdw CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to server tiny_svr
drop cascades to user mapping for public on server tiny_svr
drop cascades to foreign table test1__tiny_svr__0
drop cascades to foreign table test1_1__tiny_svr__0
--Testcase 274:
DROP EXTENSION mysql_fdw CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to server mysql_svr
drop cascades to user mapping for public on server mysql_svr
drop cascades to foreign table test1__mysql_svr__0
drop cascades to foreign table test1_1__mysql_svr__0
drop cascades to foreign table mysqlt__mysql_svr__0
drop cascades to foreign table mysqlt__mysql_svr__1
drop cascades to foreign table mysqlt__mysql_svqr__2
drop cascades to server mysql_svr2
drop cascades to user mapping for public on server mysql_svr2
